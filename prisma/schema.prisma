generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id
  email        String   @unique
  firstName    String?
  lastName     String?
  profileImage String?
  preferences  Json? // For storing user preferences that affect recommendations
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  trips        Trip[]
}

model Trip {
  id          String              @id @default(cuid())
  userId      String
  user        User                @relation(fields: [userId], references: [id])
  cityId      String
  city        City                @relation(fields: [cityId], references: [id])
  title       String
  startDate   DateTime
  endDate     DateTime
  preferences Json? // Trip-specific preferences
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  activities  ItineraryActivity[]

  @@index([userId])
  @@index([cityId])
}

model ActivityRecommendation {
  id            String   @id @default(cuid())
  name          String
  description   String
  category      String // e.g., 'outdoor', 'indoor', 'cultural'
  cityId        String
  city          City     @relation(fields: [cityId], references: [id])
  duration      Int // in minutes
  price         Int // in cents
  location      Json // { latitude: number, longitude: number, address: string, placeId?: string }
  images        Json // { urls: string[] }
  rating        Float?
  reviewCount   Int      @default(0)
  availableDays Json // { days: number[] } (0-6 for days of week)
  openingHours  Json? // { periods: { open: { day: number, time: string }, close: { day: number, time: string } }[] }
  seasonality   Json // { seasons: string[] }
  tags          Json // { tags: string[] }
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  itineraryActivities ItineraryActivity[]

  @@index([cityId])
  @@index([category])
}

model ItineraryActivity {
  id               String                 @id @default(cuid())
  tripId           String
  trip             Trip                   @relation(fields: [tripId], references: [id])
  recommendationId String
  recommendation   ActivityRecommendation @relation(fields: [recommendationId], references: [id])

  startTime               DateTime // When this activity is scheduled
  endTime                 DateTime
  notes                   String? // User notes for this instance
  status                  String   @default("planned") // planned, confirmed, completed, cancelled
  customizations          Json? // Any customizations from the recommendation template
  transitTimeFromPrevious Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tripId])
  @@index([recommendationId])
}

model City {
  id          String                   @id @default(cuid())
  name        String
  countryCode String
  placeId     String
  latitude    Float
  longitude   Float
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  activities  ActivityRecommendation[]
  trips       Trip[]

  @@unique([name, countryCode])
}
