generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RatingTier {
  EXCEPTIONAL
  HIGH
  AVERAGE
  LOW
}

enum ReviewCountTier {
  VERY_HIGH
  HIGH
  MODERATE
  LOW
}

enum IndoorOutdoor {
  INDOOR
  OUTDOOR
  BOTH
}

enum SeasonalAvailability {
  ALL_YEAR
  SEASONAL
}

enum BusinessStatus {
  OPERATIONAL
  CLOSED_TEMPORARILY
  CLOSED_PERMANENTLY
}

enum PriceLevel {
  PRICE_LEVEL_UNSPECIFIED
  PRICE_LEVEL_FREE
  PRICE_LEVEL_INEXPENSIVE
  PRICE_LEVEL_MODERATE
  PRICE_LEVEL_EXPENSIVE
  PRICE_LEVEL_VERY_EXPENSIVE
}

model User {
  id                  String   @id
  email               String   @unique
  firstName           String?
  lastName            String?
  profileImage        String?
  preferences         Json?
  onboardingCompleted Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  trips               Trip[]
}

model Trip {
  id          String              @id @default(cuid())
  userId      String
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  cityId      String
  city        City                @relation(fields: [cityId], references: [id])
  title       String
  startDate   DateTime
  endDate     DateTime
  preferences Json?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  activities  ItineraryActivity[]

  @@index([userId])
  @@index([cityId])
}

model ActivityRecommendation {
  id           String   @id @default(cuid())
  placeId      String   @unique // Google Place ID
  name         String
  location     Json // { latitude: number, longitude: number, neighborhood: string }
  cityId       String
  city         City     @relation(fields: [cityId], references: [id])
  lastSyncedAt DateTime // Track when we last confirmed existence
  images       Json? // Array of { url: string, author: string, id: string }

  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  itineraryActivities ItineraryActivity[]

  @@index([cityId])
}

model ItineraryActivity {
  id               String                 @id @default(cuid())
  tripId           String
  trip             Trip                   @relation(fields: [tripId], references: [id], onDelete: Cascade)
  recommendationId String
  recommendation   ActivityRecommendation @relation(fields: [recommendationId], references: [id])

  startTime               DateTime // When this activity is scheduled
  endTime                 DateTime
  notes                   String? // User notes for this instance
  status                  String   @default("planned") // planned, interested, confirmed, completed, cancelled
  customizations          Json? // Any customizations from the recommendation template
  transitTimeFromPrevious Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tripId])
  @@index([recommendationId])
}

model City {
  id             String                   @id @default(cuid())
  name           String
  countryCode    String
  placeId        String
  latitude       Float
  longitude      Float
  viatorDestId   Int? // Store the matching Viator destinationId
  viatorLookupId String? // Store the lookupId for API calls
  viatorData     Json? // Store the full destination data
  lastViatorSync DateTime? // Track when we last synced with Viator
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  activities     ActivityRecommendation[]
  trips          Trip[]

  @@unique([name, countryCode])
}
