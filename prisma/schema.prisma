generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String   @id
  email               String   @unique
  firstName           String?
  lastName            String?
  profileImage        String?
  preferences         Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  onboardingCompleted Boolean  @default(false)
  trips               Trip[]
}

model Trip {
  id             String              @id @default(cuid())
  userId         String
  cityId         String
  title          String
  startDate      DateTime
  endDate        DateTime
  preferences    Json?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  lastRebalanced DateTime?
  featuredImage  Json?
  activities     ItineraryActivity[]
  city           City                @relation(fields: [cityId], references: [id])
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([cityId])
}

model ActivityRecommendation {
  id                   String               @id @default(cuid())
  name                 String
  description          String
  cityId               String
  duration             Int
  location             Json
  images               Json
  rating               Float
  reviewCount          Int
  openingHours         Json?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  googlePlaceId        String?              @unique
  indoorOutdoor        IndoorOutdoor
  isMustSee            Boolean              @default(false)
  isTouristAttraction  Boolean              @default(false)
  lastSyncedAt         DateTime
  placeTypes           String[]
  ratingTier           RatingTier
  reviewCountTier      ReviewCountTier
  seasonalAvailability SeasonalAvailability @default(ALL_YEAR)
  availableDays        Int[]
  lastViatorSync       DateTime?
  viatorData           Json?
  viatorProductId      String?
  businessStatus       BusinessStatus       @default(OPERATIONAL)
  features             Json?
  primaryType          String?
  priceLevel           PriceLevel
  city                 City                 @relation(fields: [cityId], references: [id])
  itineraryActivities  ItineraryActivity[]

  @@index([cityId])
  @@index([isMustSee])
  @@index([placeTypes])
  @@index([googlePlaceId])
}

model ItineraryActivity {
  id                      String                 @id @default(cuid())
  tripId                  String
  recommendationId        String
  startTime               DateTime?
  endTime                 DateTime?
  status                  String                 @default("planned")
  transitTimeFromPrevious Int
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  warning                 String?
  recommendation          ActivityRecommendation @relation(fields: [recommendationId], references: [id])
  trip                    Trip                   @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@index([tripId])
  @@index([recommendationId])
}

model City {
  id             String                   @id @default(cuid())
  name           String
  countryCode    String
  placeId        String
  latitude       Float
  longitude      Float
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  lastViatorSync DateTime?
  viatorData     Json?
  viatorDestId   Int?
  viatorLookupId String?
  timezone       String
  activities     ActivityRecommendation[]
  trips          Trip[]

  @@unique([name, countryCode])
}

enum RatingTier {
  EXCEPTIONAL
  HIGH
  AVERAGE
  LOW
}

enum ReviewCountTier {
  VERY_HIGH
  HIGH
  MODERATE
  LOW
}

enum IndoorOutdoor {
  INDOOR
  OUTDOOR
  BOTH
}

enum SeasonalAvailability {
  ALL_YEAR
  SEASONAL
}

enum BusinessStatus {
  OPERATIONAL
  CLOSED_TEMPORARILY
  CLOSED_PERMANENTLY
}

enum PriceLevel {
  PRICE_LEVEL_UNSPECIFIED
  PRICE_LEVEL_FREE
  PRICE_LEVEL_INEXPENSIVE
  PRICE_LEVEL_MODERATE
  PRICE_LEVEL_EXPENSIVE
  PRICE_LEVEL_VERY_EXPENSIVE
}
